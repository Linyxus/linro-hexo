<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linro</title>
  <subtitle>Meet the World</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://linyxus.xyz/blog/"/>
  <updated>2017-03-04T12:53:03.847Z</updated>
  <id>http://linyxus.xyz/blog/</id>
  
  <author>
    <name>Linyxus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python查询天气</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/Python%E6%9F%A5%E8%AF%A2%E5%A4%A9%E6%B0%94/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/Python查询天气/</id>
    <published>2017-03-04T12:52:04.000Z</published>
    <updated>2017-03-04T12:53:03.847Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Python制作天气查询程序&quot;&gt;&lt;a href=&quot;#使用Python制作天气查询程序&quot; class=&quot;headerlink&quot; title=&quot;使用Python制作天气查询程序&quot;&gt;&lt;/a&gt;使用Python制作天气查询程序&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;原教程地址：&lt;a href=&quot;http://crossincode.com/course/lesson_list/&quot;&gt;Crossin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章是我按照上面的教程学习后写的一篇笔记，由于我是&lt;code&gt;Python&lt;/code&gt;初学者，如有不对的地方欢迎指出哦0v0&lt;/p&gt;
&lt;h2 id=&quot;截图&quot;&gt;&lt;a href=&quot;#截图&quot; class=&quot;headerlink&quot; title=&quot;截图&quot;&gt;&lt;/a&gt;截图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://linfile.xyz/data/vip_data/f_3356.png&quot; alt=&quot;f_3356.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linyxus.xyz/blog/categories/Python/"/>
    
    
      <category term="urllib2" scheme="http://linyxus.xyz/blog/tags/urllib2/"/>
    
      <category term="python" scheme="http://linyxus.xyz/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tarjan</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/Tarjan/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/Tarjan/</id>
    <published>2017-03-04T12:50:23.000Z</published>
    <updated>2017-03-04T12:50:48.774Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;强连通子图&quot;&gt;&lt;a href=&quot;#强连通子图&quot; class=&quot;headerlink&quot; title=&quot;强连通子图&quot;&gt;&lt;/a&gt;强连通子图&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Tarjan&lt;/code&gt;是用以找出 &lt;em&gt;有向图&lt;/em&gt; 中强连通子图的算法，那么，什么叫做 &lt;em&gt;强连通子图&lt;/em&gt; 呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果两个顶点可以相互通达，则称两个顶点强连通 &lt;em&gt;(strongly connected)&lt;/em&gt; 。如果有向&lt;br&gt;图G的每两个顶点都强连通，称G是一个强连通图。有向图的极大强连通子图，称为强连通分&lt;br&gt;量 &lt;em&gt;(strongly connected components)&lt;/em&gt; 。&lt;br&gt;——&lt;a href=&quot;http://baike.baidu.com/link?url=6d_TxAkGUvJoZavApHLSyF82lJGH61GOX281z9OOnkoVGuIYQeDl7Q4Wl06axx-Q2q2MeVqxp8bquN6lL4qO5Qf1QUiTEv_Xy9kXXe4aIOC&quot;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结一下，强连通子图有如下性质：&lt;br&gt;设原图为\(V\)，子图为\(V’\)，那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于任意\(u \in V’, u \in V\)。这是显然的，子图嘛。&lt;/li&gt;
&lt;li&gt;对于任意\(u,v \in V’\)，\(u,v\)之间互相存在通路。换言之，\(u\)可以到达&lt;br&gt;\(v\)，\(v\)也可到达\(u\)。&lt;/li&gt;
&lt;li&gt;对于任意\(u \in V, v \notin V\)，\(u,v\)之间不存在互相之间的通路（\(u\)&lt;br&gt;到不了\(v\)，或\(v\)到不了\(u\)）。这是强连通子图的极大性。如果图里的顶点&lt;br&gt;还和在子图外的顶点强连通，为啥不把那个顶点也放进来呢？&lt;/li&gt;
&lt;li&gt;一张图可以具有多个强连通子图，并且他们两两不相交。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Tarjan&quot;&gt;&lt;a href=&quot;#Tarjan&quot; class=&quot;headerlink&quot; title=&quot;Tarjan&quot;&gt;&lt;/a&gt;Tarjan&lt;/h2&gt;&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;Tarjan算法利用一个栈和递归 &lt;em&gt;(DFS)&lt;/em&gt; 的方法，对问题进行求解。&lt;br&gt;
    
    </summary>
    
      <category term="Noip" scheme="http://linyxus.xyz/blog/categories/Noip/"/>
    
    
      <category term="C++" scheme="http://linyxus.xyz/blog/tags/C/"/>
    
      <category term="图论" scheme="http://linyxus.xyz/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Edmonds Karp</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/Edmonds-Karp/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/Edmonds-Karp/</id>
    <published>2017-03-04T12:48:11.000Z</published>
    <updated>2017-03-04T12:48:55.177Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最大流问题&quot;&gt;&lt;a href=&quot;#最大流问题&quot; class=&quot;headerlink&quot; title=&quot;最大流问题&quot;&gt;&lt;/a&gt;最大流问题&lt;/h2&gt;&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;最大流问题，或者说，物资运输问题。你的目标是把物资从一个地方运到另一个地方，你知道所有的站点以及各个中转站之间可以运输的最大物资量。需要求解的是运输物资的最大量。&lt;br&gt;&lt;img src=&quot;http://linfile.xyz/data/vip_data/f_4268.svg&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上面的这一张图\(V\)中，所有顶点都表示一个站点，边表示站点之间的路，边权表示边连接的两个站点之间可以 &lt;strong&gt;运输物资的最大量&lt;/strong&gt; 。道路和边一样，都是 &lt;strong&gt;有向的&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;从0到1最多可以运输多少物资呢？可以轻易的看出，是8个单位。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://linfile.xyz/data/vip_data/f_1152.svg&quot; alt=&quot;pic2&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;熟悉了增广路问题后，让我们对一些量进行符号规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量 &lt;em&gt;(capacity)&lt;/em&gt; 。对于\(u \in V, v \in V\)，它们之间可以运输的物资最大量（也即边的容量）记为\(c(u,v)\)。若\(u, v\)之间没有边，则\(c(u,v)=0\)&lt;/li&gt;
&lt;li&gt;流量 &lt;em&gt;(flow)&lt;/em&gt; 。对于\(u \in V, v \in V\)，它们之间已经榆树物资的量（也即边的流量）记为\(f(u,v)\)。
    
    </summary>
    
      <category term="Noip" scheme="http://linyxus.xyz/blog/categories/Noip/"/>
    
    
      <category term="C++" scheme="http://linyxus.xyz/blog/tags/C/"/>
    
      <category term="图论" scheme="http://linyxus.xyz/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Dijstra</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/Dijstra/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/Dijstra/</id>
    <published>2017-03-04T12:46:22.000Z</published>
    <updated>2017-03-04T12:47:32.875Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这里的文章大多都是看了刘汝佳大大的《算法竞赛入门经典》之后写的，差不多就是把其内容复述一遍。一些我&lt;strong&gt;难以理解，经过思考&lt;/strong&gt;的内容也会写出。&lt;/p&gt;
&lt;p&gt;进入正题。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Dijstra是图论中用以求解单源最短路径&lt;em&gt;(也就是一个顶点到图中其他顶点的最短路径)&lt;/em&gt; 的算法。&lt;/p&gt;
&lt;p&gt;时间复杂度为O(n^2)。&lt;br&gt;
    
    </summary>
    
      <category term="Noip" scheme="http://linyxus.xyz/blog/categories/Noip/"/>
    
    
      <category term="C++" scheme="http://linyxus.xyz/blog/tags/C/"/>
    
      <category term="图论" scheme="http://linyxus.xyz/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>SPFA</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/SPFA/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/SPFA/</id>
    <published>2017-03-04T12:43:41.000Z</published>
    <updated>2017-03-04T12:44:50.822Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SPFA&lt;/code&gt;是基于&lt;code&gt;Bellman-ford&lt;/code&gt;的&lt;strong&gt;队列优化&lt;/strong&gt;。一般来说，SPFA的速度快于&lt;code&gt;dijstra&lt;/code&gt;和&lt;code&gt;Bellman-ford&lt;/code&gt;，是图论中常用的一种算法。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;算法从源点出发，向外拓展，若一个顶点的最小距离值被更新了，就将他放入队列中等待处理，因为这个顶点最小距离的减少可能会造成&lt;strong&gt;其他顶点的最短距离也减小&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;时间复杂度为\(O(k|E|)\) 。其中，\(k\)为每条边被处理的平均次数，而\(E\)是边集。&lt;br&gt;
    
    </summary>
    
      <category term="Noip" scheme="http://linyxus.xyz/blog/categories/Noip/"/>
    
    
      <category term="C++" scheme="http://linyxus.xyz/blog/tags/C/"/>
    
      <category term="图论" scheme="http://linyxus.xyz/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Kruskal</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/Kruskal/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/Kruskal/</id>
    <published>2017-03-04T12:16:17.000Z</published>
    <updated>2017-03-04T12:18:16.525Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Kruskal&lt;/p&gt;
&lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h2&gt;&lt;p&gt;Kruskal算法用于求无向图的最小生成树。时间复杂度为O(nlogn)。&lt;/p&gt;
&lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;&lt;code&gt;贪心法&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将所有边按权值大小排序&lt;/li&gt;
&lt;li&gt;用一个边集E表示选择了的边。清空这个边集。&lt;/li&gt;
&lt;li&gt;按照权值从小到大的顺序依次考虑每条边。&lt;ul&gt;
&lt;li&gt;若将这条边放入E中，不产生环，就将这条边放入E中。&lt;/li&gt;
&lt;li&gt;反之，不放入。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考虑完每一条边后，E就是所求的最小生成树。
    
    </summary>
    
      <category term="Noip" scheme="http://linyxus.xyz/blog/categories/Noip/"/>
    
    
      <category term="C++" scheme="http://linyxus.xyz/blog/tags/C/"/>
    
      <category term="图论" scheme="http://linyxus.xyz/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>快速读取整数</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%8F%96%E6%95%B4%E6%95%B0/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/快速读取整数/</id>
    <published>2017-03-04T12:10:03.000Z</published>
    <updated>2017-03-04T12:46:13.109Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;可能大家都知道，在读数据的时候，&lt;code&gt;scanf&lt;/code&gt;较之&lt;code&gt;cin&lt;/code&gt;快上很多。但当某些题目数据量达到&lt;strong&gt;百万&lt;/strong&gt;级别，就算使用scanf也太慢了。一共一秒钟的时间，读取数据都要用去大半。&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;当读取整数时，我们可以手动的读取字符，组成数字。这样速度将有巨大的提升。&lt;br&gt;
    
    </summary>
    
      <category term="Noip" scheme="http://linyxus.xyz/blog/categories/Noip/"/>
    
    
      <category term="C++" scheme="http://linyxus.xyz/blog/tags/C/"/>
    
      <category term="other" scheme="http://linyxus.xyz/blog/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/Hexo/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/Hexo/</id>
    <published>2017-03-04T11:54:17.000Z</published>
    <updated>2017-03-04T12:03:08.554Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-Test&quot;&gt;&lt;a href=&quot;#Hexo-Test&quot; class=&quot;headerlink&quot; title=&quot;Hexo Test&quot;&gt;&lt;/a&gt;Hexo Test&lt;/h1&gt;&lt;h2 id=&quot;Quote&quot;&gt;&lt;a href=&quot;#Quote&quot; class=&quot;header
    
    </summary>
    
      <category term="0" scheme="http://linyxus.xyz/blog/categories/0/"/>
    
    
      <category term="hello" scheme="http://linyxus.xyz/blog/tags/hello/"/>
    
      <category term="test" scheme="http://linyxus.xyz/blog/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://linyxus.xyz/blog/2017/03/04/Hello-Hexo/"/>
    <id>http://linyxus.xyz/blog/2017/03/04/Hello-Hexo/</id>
    <published>2017-03-04T09:23:38.000Z</published>
    <updated>2017-03-04T10:35:36.872Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hello-Hexo&quot;&gt;&lt;a href=&quot;#Hello-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hello Hexo!&quot;&gt;&lt;/a&gt;Hello Hexo!&lt;/h2&gt;&lt;p&gt;终于装好了&lt;a href=&quot;https://hexo.io&quot; targe
    
    </summary>
    
      <category term="0" scheme="http://linyxus.xyz/blog/categories/0/"/>
    
    
      <category term="hello" scheme="http://linyxus.xyz/blog/tags/hello/"/>
    
  </entry>
  
</feed>
